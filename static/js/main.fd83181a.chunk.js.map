{"version":3,"sources":["components/Menu/index.js","serviceWorker.js","redux/Reducer/appReducer/index.js","redux/ActionTypes/index.js","redux/Reducer/index.js","common/importer.js","screens/NoMatch/index.js","routes.js","store.js","index.js","common/config.js"],"names":["Menu","history","path","match","onClicktoRedirect","url","push","className","listNode","config","MENU","length","map","menu","transKey","link","id","icon","iconActive","activeClass","iconImage","imageObj","style","backgroundImage","IMG_BASE","IMG_EXT","key","onClick","toUpperCase","renderMenuList","Boolean","window","location","hostname","initialState","isFetched","appReducer","state","action","type","combineReducers","reducers","Home","lazy","About","Contact","Projects","props","routes","menuLinks","component","NoMatch","RouteComponent","route","render","Routes","fallback","i","Component","store","createStore","indexReducer","Store","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","URL_BASE","origin","BASE_DOMAIN","png","jpg","svg","home","about","contact","projects","isRemove","isHide","isDisable","isMaster","isClickable","isActive","authRequired","class"],"mappings":"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","file":"static/js/main.fd83181a.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport config from '../../common/config';\n\nfunction Menu({ history, match: { path } }) {\n    let renderMenuList = () => {\n        let listNode = null;\n        if(config.MENU.length) {\n            listNode = config.MENU.map((menu) => {\n                let { transKey, link, id, icon, iconActive } = menu;\n                let activeClass = 'menu__list';\n                let iconImage = icon;\n                if(link === path) {\n                    activeClass = 'menu__list active';\n                    iconImage = iconActive;\n                }\n                let imageObj = {\n                    className: \"menu__icon\",\n                    style: {\n                        backgroundImage: `url(${config.IMG_BASE}/icons/${iconImage}${config.IMG_EXT['svg']})`\n                    }\n                }\n                return (\n                    <li key={id} onClick={() => onClicktoRedirect(link)} className={activeClass}>\n                        <div {...imageObj}></div>\n                        <span>{transKey.toUpperCase()}</span>\n                    </li>\n                )\n            });\n        }\n        return listNode;\n    }\n\n    let onClicktoRedirect = (url) => history.push(url);\n\n    return (\n        <ul className=\"menu\">\n            {renderMenuList()}\n        </ul>\n    );\n}\n\nexport default Menu;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  IS_API_FETCHED\r\n} from '../../ActionTypes'\r\n\r\nconst initialState = {\r\n  isFetched: false\r\n}\r\n\r\nexport default function appReducer(state = initialState, action) {\r\n  switch(action.type) {\r\n    case IS_API_FETCHED: {\r\n      return {\r\n        ...state,\r\n        isFetched: true\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","export const IS_API_FETCHED = 'IS_API_FETCHED';","import { combineReducers } from 'redux'\r\nimport * as reducers from './appReducer'\r\n\r\nexport default combineReducers(reducers);","import { lazy } from 'react';\r\n\r\nexport const Home = lazy(()=> import(/* webpackChunkName: 'Home' */'../screens/Home'));\r\nexport const About = lazy(()=> import(/* webpackChunkName: 'About' */'../screens/About'));\r\nexport const Contact = lazy(()=> import(/* webpackChunkName: 'Contact' */'../screens/Contact'));\r\nexport const Projects = lazy(()=> import(/* webpackChunkName: 'Projects' */'../screens/Projects'));","import React, { useState, useEffect } from 'react';\r\nimport Menu from '../../components/Menu';\r\n\r\nfunction Contact(props) {\r\n  return (\r\n    <>\r\n      <div className=\"main__wrap\">\r\n        <h1>This is No Match Page</h1>\r\n      </div>\r\n      <Menu {...props}/>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default Contact;","import React, { Component, Suspense } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport config from \"./common/config\";\r\nimport { Home, About, Contact, Projects } from './common/importer';\r\nimport NoMatch from './screens/NoMatch';\r\n\r\nconst routes = [\r\n  {\r\n    path: config.menuLinks['home'],\r\n    component: Home\r\n  },\r\n  {\r\n    path: config.menuLinks['about'],\r\n    component: About\r\n  },\r\n  {\r\n    path: config.menuLinks['contact'],\r\n    component: Contact\r\n  },\r\n  {\r\n    path: config.menuLinks['projects'],\r\n    component: Projects\r\n  },\r\n  {\r\n    component: NoMatch\r\n  }\r\n];\r\n\r\nfunction RouteComponent(route) {\r\n  return (\r\n    <Route\r\n      path={route.path ? route.path : null}\r\n      render={props => {\r\n          return (\r\n            <route.component {...props} />\r\n          )\r\n        }\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default class Routes extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Suspense fallback={<div>Loader..</div>}>\r\n          <Router>\r\n            <Switch>\r\n              {routes.map((route, i) => (\r\n                <RouteComponent key={i} {...route} />\r\n              ))}\r\n            </Switch>\r\n          </Router>\r\n        </Suspense>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport {createStore, /* applyMiddleware */ } from 'redux';\nimport { Provider } from 'react-redux'\n// import logger from 'redux-logger';\nimport indexReducer from './redux/Reducer';\nimport Routes from './routes';\n// import thunk from 'redux-thunk';\n\n\nlet store = createStore(indexReducer);\n\nclass Store extends Component {\n    render() {\n      return (\n        <Provider store={store}>\n          <Routes/> \n        </Provider>\n      )\n    }\n}\n\nexport default Store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Store from './store';\n\nReactDOM.render(<Store />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","let config = {};\r\nconfig.URL_BASE = window.location.origin;\r\nconfig.BASE_DOMAIN = '/protfolio';\r\nconfig.IMG_BASE = '/portfolio/images';\r\nconfig.IMG_EXT = {\r\n  png: '.png',\r\n  jpg: '.jpg',\r\n  svg: '.svg'\r\n}\r\nconfig.menuLinks = {\r\n  home: config.BASE_DOMAIN + '/home',\r\n  about: config.BASE_DOMAIN + '/about',\r\n  contact: config.BASE_DOMAIN + '/contact',\r\n  projects: config.BASE_DOMAIN + '/projects'\r\n}\r\nconfig.MENU = [\r\n  {\r\n      id: 1,\r\n      transKey: 'home',\r\n      isRemove: false,\r\n      isHide: false,\r\n      isDisable: false,\r\n      isMaster: false,\r\n      isClickable: true,\r\n      link: config.menuLinks['home'],\r\n      isActive: false,\r\n      authRequired: false,\r\n      class: '',\r\n      icon: 'home',\r\n      iconActive: 'homeactive'\r\n  },\r\n  {\r\n    id: 2,\r\n    transKey: 'about',\r\n    isRemove: false,\r\n    isHide: false,\r\n    isDisable: false,\r\n    isMaster: false,\r\n    isClickable: true,\r\n    link: config.menuLinks['about'],\r\n    isActive: false,\r\n    authRequired: false,\r\n    class: '',\r\n    icon: 'about',\r\n    iconActive: 'aboutactive'\r\n  },\r\n  {\r\n    id: 3,\r\n    transKey: 'contact',\r\n    isRemove: false,\r\n    isHide: false,\r\n    isDisable: false,\r\n    isMaster: false,\r\n    isClickable: true,\r\n    link: config.menuLinks['contact'],\r\n    isActive: false,\r\n    authRequired: false,\r\n    class: '',\r\n    icon: 'contact',\r\n    iconActive: 'contactactive'\r\n  },\r\n  {\r\n    id: 4,\r\n    transKey: 'projects',\r\n    isRemove: false,\r\n    isHide: false,\r\n    isDisable: false,\r\n    isMaster: false,\r\n    isClickable: true,\r\n    link: config.menuLinks['projects'],\r\n    isActive: false,\r\n    authRequired: false,\r\n    class: '',\r\n    icon: 'projects',\r\n    iconActive: 'projectsactive'\r\n  }\r\n];\r\n\r\nexport default config;\r\n"],"sourceRoot":""}