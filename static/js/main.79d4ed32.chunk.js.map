{"version":3,"sources":["serviceWorker.js","redux/Reducer/appReducer/index.js","redux/ActionTypes/index.js","redux/Reducer/index.js","routes.js","common/importer.js","screens/NoMatch/index.js","store.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","isFetched","appReducer","state","action","type","combineReducers","reducers","routes","path","component","lazy","Component","RouteComponent","route","render","props","Routes","className","fallback","map","i","key","store","createStore","indexReducer","Store","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kECdAC,EAAe,CACnBC,WAAW,GAGE,SAASC,IAA0C,IAA/BC,EAA8B,uDAAtBH,EAAcI,EAAQ,uCAC/D,OAAOA,EAAOC,MACZ,ICV0B,iBDWxB,OAAO,eACFF,EADL,CAEEF,WAAW,IAGf,QACE,OAAOE,GEdEG,kBAAgBC,G,eCMzBC,EAAS,CACb,CACEC,KAAM,QACNC,UCVgBC,gBAAK,kBAAK,iCDY5B,CACEF,KAAM,SACNC,UCbiBC,gBAAK,kBAAK,iCDe7B,CACEF,KAAM,WACNC,UChBmBC,gBAAK,kBAAK,iCDkB/B,CACEF,KAAM,YACNC,UCnBoBC,gBAAK,kBAAK,iCDqBhC,CACED,U,iLEvBA,OAAQ,4C,GAFyBE,eF6BrC,SAASC,EAAeC,GACtB,OACE,kBAAC,IAAD,CACEL,KAAMK,EAAML,KAAOK,EAAML,KAAO,KAChCM,OAAQ,SAAAC,GACJ,OACE,kBAACF,EAAMJ,UAAcM,M,IAQZC,E,iLAEjB,OACE,yBAAKC,UAAU,kBACb,kBAAC,WAAD,CAAUC,SAAU,0CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGX,EAAOY,KAAI,SAACN,EAAOO,GAAR,OACV,kBAACR,EAAD,eAAgBS,IAAKD,GAAOP,e,GARRF,aGpChCW,EAAQC,YAAYC,GAYTC,E,iLART,OACE,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,W,GAJUX,aCNpBe,IAASZ,OAAO,kBAAC,EAAD,MAAWa,SAASC,eAAe,SR8H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79d4ed32.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  IS_API_FETCHED\r\n} from '../../ActionTypes'\r\n\r\nconst initialState = {\r\n  isFetched: false\r\n}\r\n\r\nexport default function appReducer(state = initialState, action) {\r\n  switch(action.type) {\r\n    case IS_API_FETCHED: {\r\n      return {\r\n        ...state,\r\n        isFetched: true\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","export const IS_API_FETCHED = 'IS_API_FETCHED';","import { combineReducers } from 'redux'\r\nimport * as reducers from './appReducer'\r\n\r\nexport default combineReducers(reducers);","import React, { Component, Suspense } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport { Home, About, Contact, Projects } from './common/importer';\r\nimport NoMatch from './screens/NoMatch';\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/home\",\r\n    component: Home\r\n  },\r\n  {\r\n    path: \"/about\",\r\n    component: About\r\n  },\r\n  {\r\n    path: \"/contact\",\r\n    component: Contact\r\n  },\r\n  {\r\n    path: \"/projects\",\r\n    component: Projects\r\n  },\r\n  {\r\n    component: NoMatch\r\n  }\r\n];\r\n\r\nfunction RouteComponent(route) {\r\n  return (\r\n    <Route\r\n      path={route.path ? route.path : null}\r\n      render={props => {\r\n          return (\r\n            <route.component {...props} />\r\n          )\r\n        }\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default class Routes extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <Suspense fallback={<div>Loader..</div>}>\r\n          <Router>\r\n            <Switch>\r\n              {routes.map((route, i) => (\r\n                <RouteComponent key={i} {...route} />\r\n              ))}\r\n            </Switch>\r\n          </Router>\r\n        </Suspense>\r\n      </div>\r\n    )\r\n  }\r\n}","import { lazy } from 'react';\r\n\r\nexport const Home = lazy(()=> import(/* webpackChunkName: 'Home' */'../screens/Home'));\r\nexport const About = lazy(()=> import(/* webpackChunkName: 'About' */'../screens/About'));\r\nexport const Contact = lazy(()=> import(/* webpackChunkName: 'Contact' */'../screens/Contact'));\r\nexport const Projects = lazy(()=> import(/* webpackChunkName: 'Projects' */'../screens/Projects'));","import React, { Component } from 'react';\r\n\r\nexport default class NoMatch extends Component {\r\n  render() {\r\n    return (<div>NoMatch</div>);\r\n  }\r\n}","import React, { Component } from 'react';\nimport {createStore, /* applyMiddleware */ } from 'redux';\nimport { Provider } from 'react-redux'\n// import logger from 'redux-logger';\nimport indexReducer from './redux/Reducer';\nimport Routes from './routes';\n// import thunk from 'redux-thunk';\n\n\nlet store = createStore(indexReducer);\n\nclass Store extends Component {\n    render() {\n      return (\n        <Provider store={store}>\n          <Routes/> \n        </Provider>\n      )\n    }\n}\n\nexport default Store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Store from './store';\n\nReactDOM.render(<Store />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}